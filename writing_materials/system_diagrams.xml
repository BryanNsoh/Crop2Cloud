<diagram1>
Filename: crop_to_cloud_data_flow_part1.png
Name: Crop to Cloud Data Flow - Part 1
Description: Data Collection and Initial Processing from Sensors to Raspberry Pi.
Code:
sequenceDiagram
    participant S as 1. Field Sensors
    participant L as 2. Campbell CR800 Logger
    participant R as 3. Raspberry Pi

    S->>L: Step 1: Send sensor data
    L->>R: Step 2: Transfer raw data (every 30 min)
    R->>R: Step 3: Process and format data
    R->>R: Step 4: Convert to hashes
    Note over R: Initial data processing complete
</diagram1>

<diagram2>
Filename: crop_to_cloud_data_flow_part2.png
Name: Crop to Cloud Data Flow - Part 2
Description: Data Transmission from Raspberry Pi to LoRa Gateway.
Code:
sequenceDiagram
    participant R as 1. Raspberry Pi
    participant LH as 2. LoRa HAT
    participant G as 3. LoRa Gateway

    R->>LH: Step 1: Send formatted data
    LH->>G: Step 2: Transmit data packet
    Note over G: Data received by Gateway
</diagram2>

<diagram3>
Filename: crop_to_cloud_data_flow_part3.png
Name: Crop to Cloud Data Flow - Part 3
Description: MQTT Broker Transmission from Gateway to Virtual Machine.
Code:
sequenceDiagram
    participant G as 1. LoRa Gateway
    participant E as 2. EMQX MQTT Broker
    participant V as 3. Virtual Machine Forwarder

    G->>E: Step 1: Publish to MQTT topic
    E->>V: Step 2: Forward MQTT message
    V->>V: Step 3: Process message
    Note over V: Data ready for cloud interaction
</diagram3>

<diagram4>
Filename: crop_to_cloud_data_flow_part4.png
Name: Crop to Cloud Data Flow - Part 4
Description: Data Processing in Cloud with PubSub and Cloud Functions.
Code:
sequenceDiagram
    participant V as 1. Virtual Machine Forwarder
    participant P as 2. Google Cloud PubSub
    participant C as 3. Cloud Function

    V->>P: Step 1: Publish to PubSub topic
    P->>C: Step 2: Trigger Cloud Function
    C->>C: Step 3: Process data
    Note over C: Cloud data processing
</diagram4>

<diagram5>
Filename: crop_to_cloud_data_flow_part5.png
Name: Crop to Cloud Data Flow - Part 5
Description: Data Storage and Updates in BigQuery.
Code:
sequenceDiagram
    participant C as 1. Cloud Function
    participant B as 2. BigQuery
    participant S as 3. Cloud Scheduler

    C->>B: Step 1: Insert into BigQuery table
    S->>C: Step 2: Trigger periodic functions
    C->>B: Step 3: Update computed metrics
    Note over B: BigQuery storage updated
</diagram5>


<diagram6>
Filename: cloud_functions_workflow.png
Name: Cloud Functions Workflow
Description: Provides an overview of various cloud functions, including weather data retrieval, forecasting, and irrigation metric computations, showing how these functions interact with BigQuery and are triggered by Cloud Scheduler.
Code:
graph TD
    A[Cloud Scheduler] -->|Triggers| B(Current Weather Function)
    A -->|Triggers| C(Forecast Function)
    A -->|Triggers| D(CWSI Computation)
    A -->|Triggers| E(ET_ref Calculation)
    A -->|Triggers| F(SWSI Computation)
    B -->|Updates| G[BigQuery Tables]
    C -->|Updates| G
    D -->|Updates| G
    E -->|Updates| G
    F -->|Updates| G
    H[PubSub Messages] -->|Trigger| I(Data Insertion Function)
    I -->|Inserts Data| G
</diagram6>

<diagram7>
  <name>Complete Sensor-to-Cloud Data Flow</name>
  <filename>complete_sensor_to_cloud_workflow.png</filename>
  <description>
    This flow diagram illustrates the data path from agricultural sensors to cloud storage, showcasing each step in the data processing chain. The workflow is presented from left to right and involves multiple components, each labeled for clarity.

    1. **Sensors (Origin)**:
       - **Canopy Temperature**: A sensor monitoring temperature at the canopy level of plants.
       - **Soil Moisture**: Sensors measuring soil moisture levels using yellow cables inserted into the ground.

    2. **Datalogger Enclosure**:
       - Contains various components managing data collection and transmission:
         - **Solar Panel**: Powers the datalogger setup.
         - **Campbell Datalogger**: The main device for data logging.
         - **RS-232 Adapter**: Facilitates communication between devices.
         - **Raspberry Pi (RBPi)**: Acts as a mini-computer for data processing.
         - **LoRa HAT**: A long-range communication module attached to the Raspberry Pi.
         - **LoRa Antenna**: Sends data over long distances.
         - **Charge Controller**: Regulates power flow from the solar panel.
         - **12V Battery**: Stores energy to power the system.
         - **Power Regulator**: Ensures consistent power supply.

    3. **LoRaWAN Gateway**:
       - Receives data transmitted by the LoRa Antenna.

    4. **MQTT Broker**:
       - Manages data packets from the gateway, enabling communication with cloud services.

    5. **VM (MQTT Packet Forwarder)**:
       - A virtual machine responsible for forwarding MQTT packets to further processing services.

    6. **Google Pub/Sub**:
       - Facilitates real-time messaging between the forwarding VM and subsequent services.

    7. **Google Cloud Functions**:
       - Executes serverless functions, processing incoming data before final storage.

    8. **Google BigQuery (Destination)**:
       - The final destination for data, stored in a structured, queryable format suitable for analysis.

    **Overall Workflow**:
    The system begins with data collection from field sensors, transmitted via LoRa technology to a gateway. Data is then managed by MQTT, processed through Google services, and stored in BigQuery, enabling comprehensive analysis of agricultural conditions.
  </description>
</diagram7>



<diagram8>
  <name>Agricultural IoT Analytics Dashboard</name>
  <filename>agricultural_iot_dashboard.png</filename>
  <description>
    The image shows a web-based dashboard interface designed for managing and visualizing agricultural data related to irrigation management. The dashboard is divided into several key sections, each providing specific analytics and control features for efficient irrigation decisions.

    1. **Controls Panel (Left Sidebar)**:
       - **Select Plot**: Dropdown menu to choose between different plots, e.g., "LINEAR_CORN_trt1_plot_5006".
       - **Select Date Range**: A date range selector to filter the displayed data, showing an interval such as "2024/08/21 â€“ 2024/09/04".
       - **Refresh Data** Button: A button to update the dashboard data according to the selected plot and date range.

    2. **Main Dashboard Area**:
       - **Weather Parameters**: 
         - A line chart showing various weather metrics over time, including solar radiation, wind speed, and relative humidity, plotted on the y-axis with timestamps on the x-axis.
       - **Temperature**:
         - A graph displaying canopy temperature, max-air temperature, and min-air temperature over time, highlighting variations in temperature metrics.

       - **Irrigation Indices**:
         - A bar chart showing calculated irrigation indices such as CWSI, SWKI, and ETo, which assist in determining irrigation needs.

       - **Precipitation**:
         - A simple line graph showing rainfall data over the selected time range with rainfall measured in millimeters.

       - **Volumetric Water Content**:
         - A line graph depicting water content at different soil depths (8 inches, 16 inches, 32 inches) over time, indicating soil moisture status.

       - **Irrigation Recommendation**:
         - A gauge showing recommended irrigation in inches, with a value indicator (e.g., 0.546 inches), guiding how much water to apply based on current conditions.

    3. **Overall Layout**:
       - The dashboard uses a dark theme with contrasting colors for different types of data, creating a visually clear and user-friendly interface for monitoring and managing irrigation.
  </description>
</diagram8>
